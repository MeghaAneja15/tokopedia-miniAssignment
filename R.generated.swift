//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `baseline_check_box_black_24pt`.
    static let baseline_check_box_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_check_box_black_24pt")
    /// Image `baseline_check_box_outline_blank_black_24pt`.
    static let baseline_check_box_outline_blank_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_check_box_outline_blank_black_24pt")
    /// Image `baseline_clear_black_24pt`.
    static let baseline_clear_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_clear_black_24pt")
    /// Image `baseline_keyboard_arrow_left_black_24pt`.
    static let baseline_keyboard_arrow_left_black_24pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_keyboard_arrow_left_black_24pt")
    /// Image `gallery`.
    static let gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "gallery")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    
    /// `UIImage(named: "baseline_check_box_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_check_box_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_check_box_black_24pt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "baseline_check_box_outline_blank_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_check_box_outline_blank_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_check_box_outline_blank_black_24pt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "baseline_clear_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_clear_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_clear_black_24pt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "baseline_keyboard_arrow_left_black_24pt", bundle: ..., traitCollection: ...)`
    static func baseline_keyboard_arrow_left_black_24pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_keyboard_arrow_left_black_24pt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gallery", bundle: ..., traitCollection: ...)`
    static func gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gallery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `FilterShopTypeCell`.
    static let filterShopTypeCell = _R.nib._FilterShopTypeCell()
    /// Nib `ShopFilterCell`.
    static let shopFilterCell = _R.nib._ShopFilterCell()
    
    /// `UINib(name: "FilterShopTypeCell", in: bundle)`
    static func filterShopTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterShopTypeCell)
    }
    
    /// `UINib(name: "ShopFilterCell", in: bundle)`
    static func shopFilterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopFilterCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `FilterShopTypeCell`.
    static let filterShopTypeCell: Rswift.ReuseIdentifier<TokopediaAssignment.FilterShopTypeCell> = Rswift.ReuseIdentifier(identifier: "FilterShopTypeCell")
    /// Reuse identifier `ProductCell`.
    static let productCell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "ProductCell")
    /// Reuse identifier `ShopFilterCell`.
    static let shopFilterCell: Rswift.ReuseIdentifier<TokopediaAssignment.ShopFilterCell> = Rswift.ReuseIdentifier(identifier: "ShopFilterCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ShopFilterCell.validate()
      try _FilterShopTypeCell.validate()
    }
    
    struct _FilterShopTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TokopediaAssignment.FilterShopTypeCell
      
      let bundle = R.hostingBundle
      let identifier = "FilterShopTypeCell"
      let name = "FilterShopTypeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TokopediaAssignment.FilterShopTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokopediaAssignment.FilterShopTypeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "baseline_clear_black_24pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_clear_black_24pt' is used in nib 'FilterShopTypeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShopFilterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TokopediaAssignment.ShopFilterCell
      
      let bundle = R.hostingBundle
      let identifier = "ShopFilterCell"
      let name = "ShopFilterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TokopediaAssignment.ShopFilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TokopediaAssignment.ShopFilterCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "baseline_check_box_outline_blank_black_24pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_check_box_outline_blank_black_24pt' is used in nib 'ShopFilterCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let name = "Main"
      let productsVC = StoryboardViewControllerResource<ProductsVC>(identifier: "ProductsVC")
      let shopFilterVC = StoryboardViewControllerResource<ShopFilterVC>(identifier: "ShopFilterVC")
      
      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }
      
      func productsVC(_: Void = ()) -> ProductsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productsVC)
      }
      
      func shopFilterVC(_: Void = ()) -> ShopFilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopFilterVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "baseline_keyboard_arrow_left_black_24pt") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_keyboard_arrow_left_black_24pt' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "baseline_clear_black_24pt") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_clear_black_24pt' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().productsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productsVC' could not be loaded from storyboard 'Main' as 'ProductsVC'.") }
        if _R.storyboard.main().shopFilterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopFilterVC' could not be loaded from storyboard 'Main' as 'ShopFilterVC'.") }
        if _R.storyboard.main().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'Main' as 'FilterVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
